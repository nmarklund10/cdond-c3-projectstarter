version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowId >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowId >>
  install_tar_gzip:
    description: install tar and gzip in amazon/aws-cli docker image
    steps:
      - run:
          name: Install tar utility
          command: yum install -y tar gzip


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: frontend
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: backend
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end tests
          working_directory: frontend
          command: |
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end tests
          working_directory: backend
          command: |
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          working_directory: frontend
          command: |
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          working_directory: backend
          command: |
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: .circleci/files
          command: >
            aws cloudformation deploy
            --template-file backend.yml
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: .circleci/files
          command: >
            aws cloudformation deploy
            --template-file frontend.yml
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: .circleci/ansible
          command: >
            aws ec2 describe-instances
            --query 'Reservations[*].Instances[*].PublicIpAddress'
            --filters "Name=tag-key,Values=aws:cloudformation:stack-name"
            "Name=tag-value,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            --output text >> inventory.txt
      - run:
          name: Add .env vars to backend distro
          working_directory: backend
          command: |
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo NODE_ENV=development >> .env
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
            - backend/.env
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [$AWS_SSH_FINGERPRINT]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y awscli ansible
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          working_directory: backend
          command: |
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to cache
          working_directory: backend
          command: |
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              echo '1' > migration_result.txt
            else
              touch migration_result.txt
            fi
      - run: cat migration_result.txt | wc -l
      - save_cache:
          paths: [backend/migration_result.txt]
          key: migrations
      - destroy-environment:
            workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install awscli
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt | sed -n '2 p')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: frontend
          command: |
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-3fbb592 --recursive
            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive TODO
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [$AWS_SSH_FINGERPRINT]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y awscli ansible npm
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: .circleci/ansible
          command: >
            aws ec2 describe-instances
            --query 'Reservations[*].Instances[*].PublicIpAddress'
            --filters "Name=tag-key,Values=aws:cloudformation:stack-name"
            "Name=tag-value,Values=udapeople-backend-3fbb592"
            --output text >> inventory.txt
      - run:
          name: install npm packages on backend
          working_directory: backend
          command: |
            npm install
            npm run build
      - run:
          name: zip backend directory
          command: |
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p .circleci/ansible/roles/configure-server/files
            mv backend/artifact.tar.gz .circleci/ansible/roles/configure-server/files
      - run:
          name: run deploy-backend ansible playbook
          working_directory: .circleci/ansible
          command: |
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # - destroy-environment:
      #     workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
          # requires: [deploy-infrastructure]
      # - run-migrations:
          # requires: [configure-infrastructure]
      # - deploy-frontend:
          # requires: [run-migrations]
      - deploy-backend #:
      #     requires: [run-migrations]